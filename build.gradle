plugins {
	id 'java'
	id 'org.springframework.boot' version '3.3.3'
	id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.anarchyadventure'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

sourceSets {
	ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile
	main {
		java {
			srcDirs = ['src/main/java', 'src/main/generated']
		}
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
	implementation 'com.auth0:java-jwt:4.0.0'

	// QueryDSL 설정 - annotation processor
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
}

// clean 태스크 실행시 QClass(queryDSL) 삭제
// -> ./gradlew clean build 거의 필수(Intellij에서 생성하기 때문. 이들이 충돌함.)
clean {
	delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
}

tasks.withType(JavaCompile).configureEach {
	options.annotationProcessorPath = configurations.annotationProcessor
	options.compilerArgs += ['-s', 'src/main/generated']
}

bootRun {
	delete file('src/main/generated') // 인텔리제이 Annotation processor 생성물 생성위치
	// Check if the 'profile' project property is provided
	if (project.hasProperty('profile')) {
		// Set the 'spring.profiles.active' system property to the value of 'profile'
		systemProperty 'spring.profiles.active', project.getProperties().get('profile')
	}
}

processResources {
	// application-{profile}.yml setting on build
	// warn: this changes file (application.yml)
	// ex) ./gradlew clean build -Pprofile=test-docker
	if (project.hasProperty('profile')) {
		def profile = project.getProperties().get('profile')
		def file = file('src/main/resources/application.yml')
		def text = file.text.replaceFirst('active:.*?\n', 'active: ' + profile + '\n');
		file.text = text
	}
}
